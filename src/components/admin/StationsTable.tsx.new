import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Edit, Trash2, AlertTriangle } from "lucide-react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { GasStation } from "@/types/station";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious
} from "@/components/ui/pagination";
import { checkDuplicateStationsInList } from "@/services/stationService";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface StationsTableProps {
  stations: GasStation[];
  onEdit: (station: GasStation) => void;
  onDelete: (station: GasStation) => void;
}

const StationsTable = ({ stations, onEdit, onDelete }: StationsTableProps) => {
  const [currentPage, setCurrentPage] = useState<number>(1);
  const itemsPerPage = 5; // عدد المحطات في كل صفحة
  const [paginatedStations, setPaginatedStations] = useState<GasStation[]>([]);
  const [totalPages, setTotalPages] = useState<number>(1);
  const [duplicateStations, setDuplicateStations] = useState<Map<string, boolean>>(new Map());

  // تحديث المحطات المعروضة عند تغيير الصفحة أو قائمة المحطات
  useEffect(() => {
    const indexOfLastItem = currentPage * itemsPerPage;
    const indexOfFirstItem = indexOfLastItem - itemsPerPage;
    setPaginatedStations(stations.slice(indexOfFirstItem, indexOfLastItem));
    setTotalPages(Math.ceil(stations.length / itemsPerPage));
  }, [currentPage, stations, itemsPerPage]);
  
  // التحقق من المحطات المكررة
  useEffect(() => {
    const checkDuplicates = async () => {
      try {
        if (stations.length > 0) {
          const duplicates = await checkDuplicateStationsInList(stations);
          setDuplicateStations(duplicates);
        }
      } catch (error) {
        console.error("Error checking for duplicate stations:", error);
      }
    };
    
    checkDuplicates();
  }, [stations]);

  // التنقل بين الصفحات
  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };
  
  return (
    <TooltipProvider>
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50px]">#</TableHead>
              <TableHead>الاسم</TableHead>
              <TableHead>المنطقة</TableHead>
              <TableHead>الموقع الفرعي</TableHead>
              <TableHead className="hidden md:table-cell">أنواع الوقود</TableHead>
              <TableHead className="text-center">الإحداثيات</TableHead>
              <TableHead className="text-right">الإجراءات</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {stations.length === 0 ? (
              <TableRow>
                <TableCell colSpan={7} className="text-center py-10">
                  لا توجد محطات مضافة
                </TableCell>
              </TableRow>
            ) : (
              paginatedStations.map((station, index) => (
                <TableRow 
                  key={station.id}
                  className={duplicateStations.get(station.id) ? "bg-amber-50" : ""}
                >
                  <TableCell>{(currentPage - 1) * itemsPerPage + index + 1}</TableCell>
                  <TableCell className="font-medium">
                    <div className="flex items-center gap-1">
                      {station.name}
                      {duplicateStations.get(station.id) && (
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <AlertTriangle size={16} className="text-amber-500" />
                          </TooltipTrigger>
                          <TooltipContent side="top" className="bg-amber-100 text-amber-800 border-amber-200">
                            <p>محطة مكررة: يوجد محطة أخرى بنفس الاسم أو في نفس الموقع الجغرافي تقريبًا</p>
                          </TooltipContent>
                        </Tooltip>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>{station.region}</TableCell>
                  <TableCell>{station.sub_region}</TableCell>
                  <TableCell className="hidden md:table-cell">{station.fuel_types || "-"}</TableCell>
                  <TableCell className="text-center text-xs">
                    <div>خط العرض: {station.latitude}</div>
                    <div>خط الطول: {station.longitude}</div>
                  </TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end gap-2">
                      {duplicateStations.get(station.id) && (
                        <Tooltip>
                          <TooltipTrigger asChild>
                            <div className="flex items-center justify-center w-8 h-8 rounded-full bg-amber-100">
                              <AlertTriangle size={16} className="text-amber-500" />
                            </div>
                          </TooltipTrigger>
                          <TooltipContent side="top" className="bg-amber-100 text-amber-800 border-amber-200">
                            <p>محطة مكررة: يوجد محطة أخرى بنفس الاسم أو في نفس الموقع الجغرافي تقريبًا</p>
                          </TooltipContent>
                        </Tooltip>
                      )}
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => onEdit(station)}
                      >
                        <Edit size={16} className="text-blue-500" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => onDelete(station)}
                      >
                        <Trash2 size={16} className="text-red-500" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>

        {/* إضافة التنقل بين الصفحات */}
        {stations.length > 0 && (
          <div className="mt-4 flex flex-col items-center py-4">
            <Pagination>
              <PaginationContent>
                <PaginationItem>
                  <PaginationPrevious
                    onClick={() => handlePageChange(Math.max(1, currentPage - 1))}
                    className={currentPage === 1 ? 'pointer-events-none opacity-50' : ''}
                  >
                    السابق
                  </PaginationPrevious>
                </PaginationItem>

                {/* عرض أرقام الصفحات */}
                {Array.from({ length: Math.min(totalPages, 5) }).map((_, index) => {
                  // حساب رقم الصفحة بناءً على الصفحة الحالية
                  let pageNumber;
                  if (totalPages <= 5) {
                    // إذا كان إجمالي الصفحات 5 أو أقل، عرض جميع الصفحات
                    pageNumber = index + 1;
                  } else if (currentPage <= 3) {
                    // إذا كانت الصفحة الحالية في البداية
                    pageNumber = index + 1;
                  } else if (currentPage >= totalPages - 2) {
                    // إذا كانت الصفحة الحالية في النهاية
                    pageNumber = totalPages - 4 + index;
                  } else {
                    // إذا كانت الصفحة الحالية في المنتصف
                    pageNumber = currentPage - 2 + index;
                  }

                  return (
                    <PaginationItem key={pageNumber}>
                      <PaginationLink
                        isActive={currentPage === pageNumber}
                        onClick={() => handlePageChange(pageNumber)}
                      >
                        {pageNumber}
                      </PaginationLink>
                    </PaginationItem>
                  );
                })}

                <PaginationItem>
                  <PaginationNext
                    onClick={() => handlePageChange(Math.min(totalPages, currentPage + 1))}
                    className={currentPage === totalPages ? 'pointer-events-none opacity-50' : ''}
                  >
                    التالي
                  </PaginationNext>
                </PaginationItem>
              </PaginationContent>
            </Pagination>

            <div className="text-center text-sm text-muted-foreground mt-2">
              صفحة {currentPage} من {totalPages}
            </div>
          </div>
        )}
      </div>
    </TooltipProvider>
  );
};

export default StationsTable;
